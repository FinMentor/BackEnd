name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # 파일을 Unix 형식으로 체크아웃 (CRLF -> LF)
          eol: lf

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle Wrapper 파일에 실행 권한 부여
      - name: Add execute permission to Gradle wrapper
        run: chmod +x ./gradlew

      # 4. Gradle 캐시 설정
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 5. 애플리케이션 빌드 (Gradle)
      - name: Build application with Gradle
        run: ./gradlew build -x test

      # 6. Docker 버전 확인
      - name: Check Docker version
        run: docker --version

      # 7. Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 8. Docker 이미지 빌드
      - name: Build Docker image
        run: docker build . -t ${{ secrets.DOCKER_USERNAME }}/backend:latest

      # 9. Docker 이미지 푸시
      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Pulling the latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest
            echo "Stopping the existing container if running..."
            docker stop backend || true
            docker rm backend || true
            echo "Starting a new container..."
            docker run -d -p 8080:8080 --name backend ${{ secrets.DOCKER_USERNAME }}/backend:latest
